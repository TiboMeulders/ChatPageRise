@* ChatWindow.razor - mockup *@

<div class="chat-window">
    <div class="chat-header">
        <button class="back-button" @onclick="HandleBack" aria-label="Terug">
            <span>←</span>
        </button>
        <h2>@Contact.Name</h2>
        <button class="help-button" @onclick="ShowHelp" aria-label="Hulp">
            <span>?</span>
        </button>
    </div>

    <div class="chat-messages">
        @foreach (var message in messages)
        {
        <div class="message @(message.IsFromCurrentUser ? "sent" : "received")">
            <div class="message-bubble">
                @if (message.IsCensored)
                {
                <span class="censored-text">***</span>
                }
                else
                {
                <span class="message-text">@message.Text</span>
                }
            </div>
            <span class="message-time">@message.Timestamp.ToString("HH:mm")</span>
        </div>
        }
    </div>

    <div class="quick-replies">
        <button class="quick-reply" @onclick='() => SendQuickMessage("Hallo!")'>
            Hallo!
        </button>
        <button class="quick-reply" @onclick='() => SendQuickMessage("Alles goed?")'>
            Alles goed?
        </button>
        <button class="quick-reply" @onclick='() => SendQuickMessage("Wat doe je?")'>
            Wat doe je?
        </button>
    </div>

    <div class="chat-input-container">
        <input type="text"
               @bind="currentMessage"
               @bind:event="oninput"
               @onkeydown="HandleKeyDown"
               placeholder="Typ je bericht..."
               class="chat-input"
               maxlength="500" />
        <button class="send-button"
                @onclick="SendMessage"
                disabled="@string.IsNullOrWhiteSpace(currentMessage)"
                aria-label="Verstuur bericht">
            <span>➤</span>
        </button>
    </div>
</div>

@code {
[Parameter]
public Contact Contact { get; set; } = default!;

[Parameter]
public EventCallback OnBack { get; set; }

private string currentMessage = "";
private List<ChatMessage> messages = new();

protected override void OnParametersSet()
{
LoadMockMessages();
}

private void LoadMockMessages()
{
messages = new List<ChatMessage>
{
new ChatMessage
{
Text = "Hallo! Hoe gaat het?",
IsFromCurrentUser = false,
Timestamp = DateTime.Now.AddMinutes(-30)
},
new ChatMessage
{
Text = "Goed hoor! En met jou?",
IsFromCurrentUser = true,
Timestamp = DateTime.Now.AddMinutes(-28)
},
new ChatMessage
{
Text = "Ook goed, bedankt!",
IsFromCurrentUser = false,
Timestamp = DateTime.Now.AddMinutes(-25)
}
};
}

private void SendMessage()
{
if (!string.IsNullOrWhiteSpace(currentMessage))
{
var message = new ChatMessage
{
Text = currentMessage,
IsFromCurrentUser = true,
Timestamp = DateTime.Now,
IsCensored = ContainsBadWords(currentMessage)
};

messages.Add(message);
currentMessage = "";
StateHasChanged();
}
}

private void SendQuickMessage(string text)
{
currentMessage = text;
SendMessage();
}

private void HandleKeyDown(KeyboardEventArgs e)
{
if (e.Key == "Enter")
{
SendMessage();
}
}

private bool ContainsBadWords(string text)
{
var badWords = new[] { "stom", "dom", "idioot", "kut", "lul" };
return badWords.Any(word => text.ToLower().Contains(word));
}

private async Task HandleBack() => await OnBack.InvokeAsync();
private void ShowHelp() { /* TODO: Help tonen */ }
}

<style>
    .chat-window {
        height: 100%;
        display: flex;
        flex-direction: column;
        background: white;
    }

    /* Header */
    .chat-header {
        display: flex;
        align-items: center;
        padding: 1rem;
        background: white;
        border-bottom: 2px solid #e0e0e0;
        gap: 1rem;
        min-height: 70px;
    }

    .back-button, .help-button {
        min-width: 50px;
        min-height: 50px;
        background: white;
        border: 2px solid #333;
        border-radius: 12px;
        font-size: 1.8rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background 0.2s;
    }

    .back-button:active, .help-button:active {
        background: #f0f0f0;
    }

    .help-button {
        border-radius: 50%;
        font-weight: bold;
    }

    .chat-header h2 {
        flex: 1;
        margin: 0;
        font-size: 1.6rem;
        color: #FF6B35;
        font-weight: 600;
    }

    /* Berichten */
    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        background: #f9f9f9;
    }

    .message {
        display: flex;
        flex-direction: column;
        max-width: 75%;
        animation: slideIn 0.3s ease;
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .message.sent {
        align-self: flex-end;
        align-items: flex-end;
    }

    .message.received {
        align-self: flex-start;
        align-items: flex-start;
    }

    .message-bubble {
        padding: 1rem 1.3rem;
        border-radius: 20px;
        word-wrap: break-word;
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }

    .message.sent .message-bubble {
        background: #FF6B35;
        color: white;
        border-bottom-right-radius: 5px;
    }

    .message.received .message-bubble {
        background: white;
        color: #333;
        border-bottom-left-radius: 5px;
        border: 1px solid #e0e0e0;
    }

    .message-text {
        font-size: 1.15rem;
        line-height: 1.5;
    }

    .censored-text {
        font-size: 1.8rem;
        letter-spacing: 0.3rem;
    }

    .message-time {
        font-size: 0.85rem;
        color: #999;
        margin-top: 0.4rem;
        padding: 0 0.5rem;
    }

    /* Quick replies */
    .quick-replies {
        display: flex;
        gap: 0.6rem;
        padding: 1rem;
        background: white;
        border-top: 2px solid #e0e0e0;
        flex-wrap: wrap;
        justify-content: center;
    }

    .quick-reply {
        background: #FF6B35;
        color: white;
        border: none;
        padding: 0.9rem 1.8rem;
        border-radius: 25px;
        cursor: pointer;
        font-weight: 600;
        font-size: 1rem;
        transition: all 0.2s;
        min-height: 50px;
    }

    .quick-reply:active {
        background: #e55a2b;
        transform: scale(0.96);
    }

    /* Input */
    .chat-input-container {
        display: flex;
        gap: 0.6rem;
        padding: 1rem;
        background: white;
        border-top: 2px solid #e0e0e0;
    }

    .chat-input {
        flex: 1;
        padding: 1rem 1.3rem;
        border: 2px solid #ddd;
        border-radius: 25px;
        font-size: 1.1rem;
        font-family: inherit;
        min-height: 50px;
    }

    .chat-input:focus {
        outline: none;
        border-color: #FF6B35;
    }

    .send-button {
        min-width: 55px;
        min-height: 55px;
        border-radius: 50%;
        background: #FF6B35;
        color: white;
        border: none;
        cursor: pointer;
        font-size: 1.8rem;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s;
        flex-shrink: 0;
    }

    .send-button:disabled {
        background: #ccc;
        cursor: not-allowed;
    }

    .send-button:not(:disabled):active {
        background: #e55a2b;
        transform: scale(0.95);
    }

    /* Tablet/Desktop */
    @@media (min-width: 768px) {
    .chat-header h2 {
        font-size: 1.5rem;
    }

    .message {
        max-width: 60%;
    }

    .quick-reply {
        padding: 0.8rem 1.5rem;
    }
    }
</style>